mean_values = list("small OVL"=matrix(c(20, 40, 40, 20), nrow = 2, ncol = 2)),
# mean_values = list("high OVL"=matrix(c(20, 22, 22, 20), nrow = 2, ncol = 2),
#                    "small OVL"=matrix(c(20, 40, 40, 20), nrow = 2, ncol = 2)),
proportions = list("balanced" = c(0.5, 0.5)),
Nbootstrap = 5, nobservations = c(200))
corr_sequence <- seq(-0.8, 0.8, 0.2)
sigma_values <- list()
for (corr_1 in corr_sequence) {
for (corr_2 in corr_sequence) {
sigma_values[[glue::glue("comp_1_corr_{corr_1}_comp_2_{corr_2}")]] <-
array(c(1, corr_1, corr_1, 1, 1, corr_2, corr_2, 1), dim = c(2, 2, 2))
}
}
multi_parameters_distribution <- benchmark_multivariate_GMM_estimation(
mixture_functions = list("DCEM" = list(name_fonction = em_DCEM_multivariate, list_params = list()),
"mixtools" = list(name_fonction = em_mixtools_multivariate, list_params = list())),
initialisation_algorithms = c("kmeans", "random"),
sigma_values = sigma_values[1:2],
mean_values = list("small OVL"=matrix(c(20, 40, 40, 20), nrow = 2, ncol = 2)),
# mean_values = list("high OVL"=matrix(c(20, 22, 22, 20), nrow = 2, ncol = 2),
#                    "small OVL"=matrix(c(20, 40, 40, 20), nrow = 2, ncol = 2)),
proportions = list("balanced" = c(0.5, 0.5)),
Nbootstrap = 5, nobservations = c(200))
multi_parameters_distribution <- benchmark_multivariate_GMM_estimation(
mixture_functions = list("DCEM" = list(name_fonction = em_DCEM_multivariate, list_params = list()),
"mixtools" = list(name_fonction = em_mixtools_multivariate, list_params = list())),
initialisation_algorithms = c("kmeans", "random"),
sigma_values = sigma_values[1:2],
mean_values = list("small OVL"=matrix(c(20, 40, 40, 20), nrow = 2, ncol = 2)),
# mean_values = list("high OVL"=matrix(c(20, 22, 22, 20), nrow = 2, ncol = 2),
#                    "small OVL"=matrix(c(20, 40, 40, 20), nrow = 2, ncol = 2)),
proportions = list("balanced" = c(0.5, 0.5)),
Nbootstrap = 5, nobservations = c(200))
relevant_mixture_functions <- list(
"em R" = list(name_fonction = emnmix_multivariate, list_params = list()),
"Rmixmod" = list(name_fonction = em_Rmixmod_multivariate, list_params = list()),
"mixtools" = list(name_fonction = em_mixtools_multivariate, list_params = list()),
"bgmm" = list(name_fonction = em_bgmm_multivariate, list_params = list()),
"mclust" = list(name_fonction = em_mclust_multivariate, list_params = list(prior = NULL)),
"EMCluster" = list(name_fonction = em_EMCluster_multivariate, list_params = list()),
"GMKMcharlie" = list(name_fonction = em_GMKMcharlie_multivariate, list_params = list()),
"flexmix" = list(name_fonction = em_flexmix_multivariate, list_params = list()),
"DCEM" = list(name_fonction = em_DCEM_multivariate, list_params = list()))
multi_parameters_distribution <- benchmark_multivariate_GMM_estimation(
mixture_functions = relevant_mixture_functions[1],
initialisation_algorithms = c("kmeans"),
sigma_values = sigma_values[1:2],
mean_values = list("small OVL"=matrix(c(20, 40, 40, 20), nrow = 2, ncol = 2)),
# mean_values = list("high OVL"=matrix(c(20, 22, 22, 20), nrow = 2, ncol = 2),
#                    "small OVL"=matrix(c(20, 40, 40, 20), nrow = 2, ncol = 2)),
proportions = list("balanced" = c(0.5, 0.5)),
Nbootstrap = 2, nobservations = c(200))
print(Nbootstrap)
devtools::load_all()
multi_parameters_distribution <- benchmark_multivariate_GMM_estimation(
mixture_functions = relevant_mixture_functions[1],
initialisation_algorithms = c("kmeans"),
sigma_values = sigma_values[1:2],
mean_values = list("small OVL"=matrix(c(20, 40, 40, 20), nrow = 2, ncol = 2)),
# mean_values = list("high OVL"=matrix(c(20, 22, 22, 20), nrow = 2, ncol = 2),
#                    "small OVL"=matrix(c(20, 40, 40, 20), nrow = 2, ncol = 2)),
proportions = list("balanced" = c(0.5, 0.5)),
Nbootstrap = 2, nobservations = c(200))
multi_parameters_distribution <- benchmark_multivariate_GMM_estimation(
mixture_functions = relevant_mixture_functions[1],
initialisation_algorithms = c("kmeans"),
sigma_values = sigma_values[1:2],
mean_values = list("small OVL"=matrix(c(20, 40, 40, 20), nrow = 2, ncol = 2)),
# mean_values = list("high OVL"=matrix(c(20, 22, 22, 20), nrow = 2, ncol = 2),
#                    "small OVL"=matrix(c(20, 40, 40, 20), nrow = 2, ncol = 2)),
proportions = list("balanced" = c(0.5, 0.5)),
Nbootstrap = 2, nobservations = c(200))
multi_parameters_distribution <- benchmark_multivariate_GMM_estimation(
mixture_functions = relevant_mixture_functions[1],
initialisation_algorithms = c("kmeans"),
sigma_values = sigma_values[1:2],
mean_values = list("small OVL"=matrix(c(20, 40, 40, 20), nrow = 2, ncol = 2)),
# mean_values = list("high OVL"=matrix(c(20, 22, 22, 20), nrow = 2, ncol = 2),
#                    "small OVL"=matrix(c(20, 40, 40, 20), nrow = 2, ncol = 2)),
proportions = list("balanced" = c(0.5, 0.5)),
Nbootstrap = 2, nobservations = c(200))
multi_parameters_distribution <- benchmark_multivariate_GMM_estimation(
mixture_functions = relevant_mixture_functions[1],
initialisation_algorithms = c("kmeans"),
sigma_values = sigma_values[1:2],
mean_values = list("small OVL"=matrix(c(20, 40, 40, 20), nrow = 2, ncol = 2)),
# mean_values = list("high OVL"=matrix(c(20, 22, 22, 20), nrow = 2, ncol = 2),
#                    "small OVL"=matrix(c(20, 40, 40, 20), nrow = 2, ncol = 2)),
proportions = list("balanced" = c(0.5, 0.5)),
Nbootstrap = 2, nobservations = c(200))
multi_parameters_distribution$distributions
multi_parameters_distribution$local_scores
multi_parameters_distribution <- benchmark_multivariate_GMM_estimation(
mixture_functions = relevant_mixture_functions[1],
initialisation_algorithms = c("kmeans"),
sigma_values = sigma_values[1:2],
mean_values = list("small OVL"=matrix(c(20, 40, 40, 20), nrow = 2, ncol = 2)),
# mean_values = list("high OVL"=matrix(c(20, 22, 22, 20), nrow = 2, ncol = 2),
#                    "small OVL"=matrix(c(20, 40, 40, 20), nrow = 2, ncol = 2)),
proportions = list("balanced" = c(0.5, 0.5)),
Nbootstrap = 2, nobservations = c(200))
multi_parameters_distribution <- benchmark_multivariate_GMM_estimation(
mixture_functions = relevant_mixture_functions[1],
initialisation_algorithms = c("kmeans"),
sigma_values = sigma_values[1],
mean_values = list("small OVL"=matrix(c(20, 40, 40, 20), nrow = 2, ncol = 2)),
# mean_values = list("high OVL"=matrix(c(20, 22, 22, 20), nrow = 2, ncol = 2),
#                    "small OVL"=matrix(c(20, 40, 40, 20), nrow = 2, ncol = 2)),
proportions = list("balanced" = c(0.5, 0.5)),
Nbootstrap = 2, nobservations = c(200))
multi_parameters_distribution <- benchmark_multivariate_GMM_estimation(
mixture_functions = relevant_mixture_functions[1],
initialisation_algorithms = c("kmeans"),
sigma_values = sigma_values[1],
mean_values = list("small OVL"=matrix(c(20, 40, 40, 20), nrow = 2, ncol = 2)),
# mean_values = list("high OVL"=matrix(c(20, 22, 22, 20), nrow = 2, ncol = 2),
#                    "small OVL"=matrix(c(20, 40, 40, 20), nrow = 2, ncol = 2)),
proportions = list("balanced" = c(0.5, 0.5)),
Nbootstrap = 2, nobservations = c(200))
multi_parameters_distribution <- benchmark_multivariate_GMM_estimation(
mixture_functions = relevant_mixture_functions[1],
initialisation_algorithms = c("kmeans"),
sigma_values = sigma_values[1],
mean_values = list("small OVL"=matrix(c(20, 40, 40, 20), nrow = 2, ncol = 2)),
# mean_values = list("high OVL"=matrix(c(20, 22, 22, 20), nrow = 2, ncol = 2),
#                    "small OVL"=matrix(c(20, 40, 40, 20), nrow = 2, ncol = 2)),
proportions = list("balanced" = c(0.5, 0.5)),
Nbootstrap = 2, nobservations = c(200))
multi_parameters_distribution <- benchmark_multivariate_GMM_estimation(
mixture_functions = relevant_mixture_functions[1],
initialisation_algorithms = c("kmeans"),
sigma_values = sigma_values[1],
mean_values = list("small OVL"=matrix(c(20, 40, 40, 20), nrow = 2, ncol = 2)),
# mean_values = list("high OVL"=matrix(c(20, 22, 22, 20), nrow = 2, ncol = 2),
#                    "small OVL"=matrix(c(20, 40, 40, 20), nrow = 2, ncol = 2)),
proportions = list("balanced" = c(0.5, 0.5)),
Nbootstrap = 2, nobservations = c(200, 400))
options(error = recover)
multi_parameters_distribution <- benchmark_multivariate_GMM_estimation(
mixture_functions = relevant_mixture_functions[1],
initialisation_algorithms = c("kmeans"),
sigma_values = sigma_values[1],
mean_values = list("small OVL"=matrix(c(20, 40, 40, 20), nrow = 2, ncol = 2)),
# mean_values = list("high OVL"=matrix(c(20, 22, 22, 20), nrow = 2, ncol = 2),
#                    "small OVL"=matrix(c(20, 40, 40, 20), nrow = 2, ncol = 2)),
proportions = list("balanced" = c(0.5, 0.5)),
Nbootstrap = 2, nobservations = c(200, 400))
options(error=NULL)
multi_parameters_distribution <- benchmark_multivariate_GMM_estimation(
mixture_functions = relevant_mixture_functions[1],
initialisation_algorithms = c("kmeans"),
sigma_values = sigma_values[1],
mean_values = list("small OVL"=matrix(c(20, 40, 40, 20), nrow = 2, ncol = 2)),
# mean_values = list("high OVL"=matrix(c(20, 22, 22, 20), nrow = 2, ncol = 2),
#                    "small OVL"=matrix(c(20, 40, 40, 20), nrow = 2, ncol = 2)),
proportions = list("balanced" = c(0.5, 0.5)),
Nbootstrap = 2, nobservations = c(200, 400))
devtools::load_all()
multi_parameters_distribution <- benchmark_multivariate_GMM_estimation(
mixture_functions = relevant_mixture_functions[1],
initialisation_algorithms = c("kmeans"),
sigma_values = sigma_values[1],
mean_values = list("small OVL"=matrix(c(20, 40, 40, 20), nrow = 2, ncol = 2)),
# mean_values = list("high OVL"=matrix(c(20, 22, 22, 20), nrow = 2, ncol = 2),
#                    "small OVL"=matrix(c(20, 40, 40, 20), nrow = 2, ncol = 2)),
proportions = list("balanced" = c(0.5, 0.5)),
Nbootstrap = 2, nobservations = c(200, 400))
paste("We aim at learning the following estimates", formatted_true_theta, collapse = "//")
paste("We aim at learning the following estimates", formatted_true_theta, sep = "//")
k <- length(p); bootstrap_colnames <- names(formatted_true_theta)
paste(bootstrap_colnames, formatted_true_theta, collapse=": ")
paste(bootstrap_colnames, ":", formatted_true_theta, collapse="//")
paste0(bootstrap_colnames, ":", formatted_true_theta, collapse=" // ")
paste0(bootstrap_colnames, ": ", formatted_true_theta, collapse=" // ")
message(paste("We aim at learning the following estimates",
paste0(bootstrap_colnames, ": ", formatted_true_theta, collapse=" // ")))
message(paste("We aim at learning the following estimates: \n",
paste0(bootstrap_colnames, ": ", formatted_true_theta, collapse=" // ")))
devtools::load_all()
multi_parameters_distribution <- benchmark_multivariate_GMM_estimation(
mixture_functions = relevant_mixture_functions[1],
initialisation_algorithms = c("kmeans"),
sigma_values = sigma_values[1],
mean_values = list("small OVL"=matrix(c(20, 40, 40, 20), nrow = 2, ncol = 2)),
# mean_values = list("high OVL"=matrix(c(20, 22, 22, 20), nrow = 2, ncol = 2),
#                    "small OVL"=matrix(c(20, 40, 40, 20), nrow = 2, ncol = 2)),
proportions = list("balanced" = c(0.5, 0.5)),
Nbootstrap = 2, nobservations = c(200, 400))
multi_parameters_distribution <- benchmark_multivariate_GMM_estimation(
mixture_functions = relevant_mixture_functions[1],
initialisation_algorithms = c("kmeans"),
sigma_values = sigma_values[1:4],
mean_values = list("small OVL"=matrix(c(20, 40, 40, 20), nrow = 2, ncol = 2)),
# mean_values = list("high OVL"=matrix(c(20, 22, 22, 20), nrow = 2, ncol = 2),
#                    "small OVL"=matrix(c(20, 40, 40, 20), nrow = 2, ncol = 2)),
proportions = list("balanced" = c(0.5, 0.5)),
Nbootstrap = 2, nobservations = c(1000))
relevant_mixture_functions <- list(
"em R" = list(name_fonction = emnmix_multivariate, list_params = list()),
"Rmixmod" = list(name_fonction = em_Rmixmod_multivariate, list_params = list()),
"mixtools" = list(name_fonction = em_mixtools_multivariate, list_params = list()),
"bgmm" = list(name_fonction = em_bgmm_multivariate, list_params = list()),
"mclust" = list(name_fonction = em_mclust_multivariate, list_params = list(prior = NULL)),
"EMCluster" = list(name_fonction = em_EMCluster_multivariate, list_params = list()),
"GMKMcharlie" = list(name_fonction = em_GMKMcharlie_multivariate, list_params = list()),
"flexmix" = list(name_fonction = em_flexmix_multivariate, list_params = list()),
"DCEM" = list(name_fonction = em_DCEM_multivariate, list_params = list()))
corr_sequence <- seq(-0.8, 0.8, 0.2)
sigma_values <- list()
for (corr_1 in corr_sequence) {
for (corr_2 in corr_sequence) {
sigma_values[[glue::glue("comp_1_corr_{corr_1}_comp_2_{corr_2}")]] <-
array(c(1, corr_1, corr_1, 1, 1, corr_2, corr_2, 1), dim = c(2, 2, 2))
}
}
multi_parameters_distribution <- benchmark_multivariate_GMM_estimation(
mixture_functions = relevant_mixture_functions,
initialisation_algorithms = c("kmeans", "random", "hc", "small em", "rebmix"),
sigma_values = sigma_values,
mean_values = list("small OVL"=matrix(c(20, 40, 40, 20), nrow = 2, ncol = 2)),
# mean_values = list("high OVL"=matrix(c(20, 22, 22, 20), nrow = 2, ncol = 2),
#                    "small OVL"=matrix(c(20, 40, 40, 20), nrow = 2, ncol = 2)),
proportions = list("balanced" = c(0.5, 0.5)),
Nbootstrap = 100, nobservations = c(1000))
devtools::load_all()
rm(list = ls())
devtools::document()
warnings()
devtools::document()
devtools::load_all()
?RGMMBench::array_to_trig_mat()
?RGMMBench::array_to_trig_mat
?RGMMBench::trig_mat_to_array
RGMMBench:::array_to_trig_mat
?RGMMBench:::array_to_trig_mat
devtools::load_all()
devtools::document()
devtools::load_all()
?RGMMBench::em_Rmixmod_univariate
devtools::document()
?RGMMBench::em_bgmm_univariate()
devtools::document()
library(RGMMBench)
library(RGMMBench)
hard_true_theta <- list(p=c(0.5, 0.5),
mu=matrix(c(20, 22, 20, 22), nrow = 2),
sigma=array(c(1, -0.8, -0.8, 1, 1, -0.8, -0.8, 1), dim=c(2, 2, 2)))
hard_multivariate_simulation <- simulate_multivariate_GMM (theta=true_theta, n=1000)
hard_inititial_kmeans_estimates <- initialize_em_multivariate(multivariate_simulation$x, k = 2,
initialisation_algorithm = "kmeans")
devtools::load_all()
hard_true_theta <- list(p=c(0.5, 0.5),
mu=matrix(c(20, 22, 20, 22), nrow = 2),
sigma=array(c(1, -0.8, -0.8, 1, 1, -0.8, -0.8, 1), dim=c(2, 2, 2)))
hard_multivariate_simulation <- simulate_multivariate_GMM (theta=true_theta, n=1000)
hard_inititial_kmeans_estimates <- initialize_em_multivariate(multivariate_simulation$x, k = 2,
initialisation_algorithm = "kmeans")
hard_true_theta <- list(p=c(0.5, 0.5),
mu=matrix(c(20, 22, 20, 22), nrow = 2),
sigma=array(c(1, -0.8, -0.8, 1, 1, -0.8, -0.8, 1), dim=c(2, 2, 2)))
hard_multivariate_simulation <- simulate_multivariate_GMM (theta=true_theta, n=1000)
hard_inititial_kmeans_estimates <- initialize_em_multivariate(hard_multivariate_simulation$x, k = 2,
initialisation_algorithm = "kmeans")
hard_true_theta <- list(p=c(0.5, 0.5),
mu=matrix(c(20, 22, 20, 22), nrow = 2),
sigma=array(c(1, -0.8, -0.8, 1, 1, -0.8, -0.8, 1), dim=c(2, 2, 2)))
hard_multivariate_simulation <- simulate_multivariate_GMM (theta=hard_true_theta, n=1000)
hard_inititial_kmeans_estimates <- initialize_em_multivariate(hard_multivariate_simulation$x, k = 2,
initialisation_algorithm = "kmeans")
own_EM_implementation <- emnmix_multivariate (x = hard_multivariate_simulation$x, k = 2,
itmax = 1, epsilon = 10^-6,
start = hard_inititial_kmeans_estimates)
own_EM_implementation$p
options(warn=2, error=recover)
devtools::load_all()
set.seed(20)
relevant_mixture_functions <- list(
"em R" = list(name_fonction = emnmix_multivariate, list_params = list()),
"Rmixmod" = list(name_fonction = RGMMBench::em_Rmixmod_multivariate, list_params = list()),
"mixtools" = list(name_fonction = em_mixtools_multivariate, list_params = list()),
"bgmm" = list(name_fonction = em_bgmm_multivariate, list_params = list()),
"mclust" = list(name_fonction = em_mclust_multivariate, list_params = list(prior = NULL)),
"EMCluster" = list(name_fonction = em_EMCluster_multivariate, list_params = list()),
"GMKMcharlie" = list(name_fonction = em_GMKMcharlie_multivariate, list_params = list()),
"flexmix" = list(name_fonction = em_flexmix_multivariate, list_params = list()),
"DCEM" = list(name_fonction = em_DCEM_multivariate, list_params = list()))
corr_sequence <- seq(-0.8, 0.8, 0.2)
sigma_values <- list()
for (corr_1 in corr_sequence) {
for (corr_2 in corr_sequence) {
sigma_values[[glue::glue("comp_1_corr_{corr_1}_comp_2_{corr_2}")]] <-
array(c(1, corr_1, corr_1, 1, 1, corr_2, corr_2, 1), dim = c(2, 2, 2))
}
}
test_parameters_distribution <- benchmark_multivariate_GMM_estimation(
mixture_functions = relevant_mixture_functions[1:2],
initialisation_algorithms = c("kmeans", "random"),
sigma_values = sigma_values[1],
mean_values = list("high OVL"=matrix(c(20, 22, 22, 20), nrow = 2, ncol = 2),
"small OVL"=matrix(c(20, 40, 40, 20), nrow = 2, ncol = 2)),
proportions = list("balanced"=c(0.5, 0.5)),
Nbootstrap = 5, nobservations = c(500))
options(warn=2, error=recover)
test_parameters_distribution <- benchmark_multivariate_GMM_estimation(
mixture_functions = relevant_mixture_functions[1:2],
initialisation_algorithms = c("kmeans", "random"),
sigma_values = sigma_values[1],
mean_values = list("high OVL"=matrix(c(20, 22, 22, 20), nrow = 2, ncol = 2),
"small OVL"=matrix(c(20, 40, 40, 20), nrow = 2, ncol = 2)),
proportions = list("balanced"=c(0.5, 0.5)),
Nbootstrap = 5, nobservations = c(500))
test_parameters_distribution <- benchmark_multivariate_GMM_estimation(
mixture_functions = relevant_mixture_functions[1:2],
initialisation_algorithms = c("kmeans", "random"),
sigma_values = sigma_values[1],
mean_values = list("high OVL"=matrix(c(20, 22, 22, 20), nrow = 2, ncol = 2),
"small OVL"=matrix(c(20, 40, 40, 20), nrow = 2, ncol = 2)),
proportions = list("balanced"=c(0.5, 0.5)),
Nbootstrap = 5, nobservations = c(500))
package_name
test_parameters_distribution <- benchmark_multivariate_GMM_estimation(
mixture_functions = relevant_mixture_functions[1],
initialisation_algorithms = c("kmeans"),
sigma_values = sigma_values[1],
mean_values = list("high OVL"=matrix(c(20, 22, 22, 20), nrow = 2, ncol = 2)),
proportions = list("balanced"=c(0.5, 0.5)),
Nbootstrap = 5, nobservations = c(500))
check_parameters_validity_multivariate(missing_estimated_theta_list, k = k)
test_parameters_distribution <- benchmark_multivariate_GMM_estimation(
mixture_functions = relevant_mixture_functions[1],
initialisation_algorithms = c("kmeans"),
sigma_values = sigma_values[1],
mean_values = list("high OVL"=matrix(c(20, 22, 22, 20), nrow = 2, ncol = 2)),
proportions = list("balanced"=c(0.5, 0.5)),
Nbootstrap = 5, nobservations = c(500))
options(warn=0, error=NULL)
test_parameters_distribution <- benchmark_multivariate_GMM_estimation(
mixture_functions = relevant_mixture_functions[1],
initialisation_algorithms = c("kmeans"),
sigma_values = sigma_values[1],
mean_values = list("high OVL"=matrix(c(20, 22, 22, 20), nrow = 2, ncol = 2)),
proportions = list("balanced"=c(0.5, 0.5)),
Nbootstrap = 5, nobservations = c(500))
test_parameters_distribution <- benchmark_multivariate_GMM_estimation(
mixture_functions = relevant_mixture_functions[1],
initialisation_algorithms = c("kmeans"),
sigma_values = sigma_values[1],
mean_values = list("high OVL"=matrix(c(20, 22, 22, 20), nrow = 2, ncol = 2)),
proportions = list("balanced"=c(0.5, 0.5)),
Nbootstrap = 5, nobservations = c(500))
test_parameters_distribution <- benchmark_multivariate_GMM_estimation(
mixture_functions = relevant_mixture_functions[1],
initialisation_algorithms = c("kmeans"),
sigma_values = sigma_values[1],
mean_values = list("high OVL"=matrix(c(20, 22, 22, 20), nrow = 2, ncol = 2)),
proportions = list("balanced"=c(0.5, 0.5)),
Nbootstrap = 5, nobservations = c(500))
test_parameters_distribution <- benchmark_multivariate_GMM_estimation(
mixture_functions = relevant_mixture_functions[1],
initialisation_algorithms = c("kmeans"),
sigma_values = sigma_values[1],
mean_values = list("high OVL"=matrix(c(20, 22, 22, 20), nrow = 2, ncol = 2)),
proportions = list("balanced"=c(0.5, 0.5)),
Nbootstrap = 5, nobservations = c(500))
do.call(mixture_function, c(
x = list(simulated_distribution$x), k = simulated_distribution$k,
epsilon = epsilon, itmax = itmax,
start = list(start), mixture_functions[[index]]$list_params
))
missing_estimated_theta_list <- do.call(mixture_function, c(
x = list(simulated_distribution$x), k = simulated_distribution$k,
epsilon = epsilon, itmax = itmax,
start = list(start), mixture_functions[[index]]$list_params
))
check_parameters_validity_multivariate(missing_estimated_theta_list, k = k)
set.seed(20)
relevant_mixture_functions <- list(
"em R" = list(name_fonction = emnmix_multivariate, list_params = list()),
"Rmixmod" = list(name_fonction = RGMMBench::em_Rmixmod_multivariate, list_params = list()),
"mixtools" = list(name_fonction = em_mixtools_multivariate, list_params = list()),
"bgmm" = list(name_fonction = em_bgmm_multivariate, list_params = list()),
"mclust" = list(name_fonction = em_mclust_multivariate, list_params = list(prior = NULL)),
"EMCluster" = list(name_fonction = em_EMCluster_multivariate, list_params = list()),
"GMKMcharlie" = list(name_fonction = em_GMKMcharlie_multivariate, list_params = list()),
"flexmix" = list(name_fonction = em_flexmix_multivariate, list_params = list()),
"DCEM" = list(name_fonction = em_DCEM_multivariate, list_params = list()))
corr_sequence <- seq(-0.8, 0.8, 0.2)
sigma_values <- list()
for (corr_1 in corr_sequence) {
for (corr_2 in corr_sequence) {
sigma_values[[glue::glue("comp_1_corr_{corr_1}_comp_2_{corr_2}")]] <-
array(c(1, corr_1, corr_1, 1, 1, corr_2, corr_2, 1), dim = c(2, 2, 2))
}
}
test_parameters_distribution <- benchmark_multivariate_GMM_estimation(
mixture_functions = relevant_mixture_functions[1],
initialisation_algorithms = c("kmeans"),
sigma_values = sigma_values[1],
mean_values = list("high OVL"=matrix(c(20, 22, 22, 20), nrow = 2, ncol = 2)),
proportions = list("balanced"=c(0.5, 0.5)),
Nbootstrap = 1, nobservations = c(500))
do.call(mixture_function, c(
x = list(simulated_distribution$x), k = simulated_distribution$k,
epsilon = epsilon, itmax = itmax,
start = list(start), mixture_functions[[index]]$list_params
))
saveRDS(object = list(simulated_distribution=simulated_distribution, start=start),
file = glue::glue("./errors/package_{package_name}_init_algo_{init_algo}.rds"))
readRDS("./errors/package_em R_init_algo_kmeans.rds")
rm(list = ls())
start <- readRDS("./errors/package_em R_init_algo_kmeans.rds")$start
multivariate_simulation <- readRDS("./errors/package_em R_init_algo_kmeans.rds")$simulated_distribution
emnmix_multivariate (x = multivariate_simulation$x, k = 2,
itmax = 1, epsilon = 10^-6, start = start)
emnmix_multivariate (x = multivariate_simulation$x, k = 2,
itmax = 100, epsilon = 10^-6, start = start)
own_EM_implementation <- emnmix_multivariate (x = multivariate_simulation$x, k = 2,
itmax = 100, epsilon = 10^-6, start = start)
devtools::load_all()
own_EM_implementation <- emnmix_multivariate (x = multivariate_simulation$x, k = 2,
itmax = 100, epsilon = 10^-6, start = start)
sum(c(0.421815926009214, 0.578184073990785))
sum(c(0.421815926009214, 0.578184073990785))==1
1-sum(c(0.421815926009214, 0.578184073990785))
.Machine$double.eps
abs(sum(c(0.421815926009214, 0.578184073990785))-1)<=.Machine$double.eps
abs(sum(c(0.421815926009214, 0.578184073990785))-1)-Machine$double.eps
abs(sum(c(0.421815926009214, 0.578184073990785))-1)-.Machine$double.eps
p <- c(0.421815926009214, 0.578184073990785)
any(p>1 - machine_limit)
machine_limit <- .Machine$double.eps
any(p>1 - machine_limit)
any(p<machine_limit)
sum(p)!=1
abs(sum(p) - machine_limit) > 10^-6
abs(sum(p) - 1)
abs(sum(p) - 1) > 10^-6
devtools::load_all()
devtools::load_all()
devtools::load_all()
own_EM_implementation <- emnmix_multivariate (x = multivariate_simulation$x, k = 2,
itmax = 100, epsilon = 10^-6, start = start)
devtools::load_all()
rm(list = ls())
library(RGMMBench)
library(RGMMBench)
devtools::load_all()
set.seed(20)
relevant_mixture_functions <- list(
"em R" = list(name_fonction = emnmix_multivariate, list_params = list()),
"Rmixmod" = list(name_fonction = RGMMBench::em_Rmixmod_multivariate, list_params = list()),
"mixtools" = list(name_fonction = em_mixtools_multivariate, list_params = list()),
"bgmm" = list(name_fonction = em_bgmm_multivariate, list_params = list()),
"mclust" = list(name_fonction = em_mclust_multivariate, list_params = list(prior = NULL)),
"EMCluster" = list(name_fonction = em_EMCluster_multivariate, list_params = list()),
"GMKMcharlie" = list(name_fonction = em_GMKMcharlie_multivariate, list_params = list()),
"flexmix" = list(name_fonction = em_flexmix_multivariate, list_params = list()),
"DCEM" = list(name_fonction = em_DCEM_multivariate, list_params = list()))
corr_sequence <- seq(-0.8, 0.8, 0.2)
sigma_values <- list()
for (corr_1 in corr_sequence) {
for (corr_2 in corr_sequence) {
sigma_values[[glue::glue("comp_1_corr_{corr_1}_comp_2_{corr_2}")]] <-
array(c(1, corr_1, corr_1, 1, 1, corr_2, corr_2, 1), dim = c(2, 2, 2))
}
}
test_parameters_distribution <- benchmark_multivariate_GMM_estimation(
mixture_functions = relevant_mixture_functions[1],
initialisation_algorithms = c("kmeans"),
sigma_values = sigma_values[1],
mean_values = list("high OVL"=matrix(c(20, 22, 22, 20), nrow = 2, ncol = 2)),
proportions = list("balanced"=c(0.5, 0.5)),
Nbootstrap = 1, nobservations = c(500))
set.seed(20)
relevant_mixture_functions <- list(
"em R" = list(name_fonction = emnmix_multivariate, list_params = list()),
"Rmixmod" = list(name_fonction = RGMMBench::em_Rmixmod_multivariate, list_params = list()),
"mixtools" = list(name_fonction = em_mixtools_multivariate, list_params = list()),
"bgmm" = list(name_fonction = em_bgmm_multivariate, list_params = list()),
"mclust" = list(name_fonction = em_mclust_multivariate, list_params = list(prior = NULL)),
"EMCluster" = list(name_fonction = em_EMCluster_multivariate, list_params = list()),
"GMKMcharlie" = list(name_fonction = em_GMKMcharlie_multivariate, list_params = list()),
"flexmix" = list(name_fonction = em_flexmix_multivariate, list_params = list()),
"DCEM" = list(name_fonction = em_DCEM_multivariate, list_params = list()))
corr_sequence <- seq(-0.8, 0.8, 0.2)
sigma_values <- list()
for (corr_1 in corr_sequence) {
for (corr_2 in corr_sequence) {
sigma_values[[glue::glue("comp_1_corr_{corr_1}_comp_2_{corr_2}")]] <-
array(c(1, corr_1, corr_1, 1, 1, corr_2, corr_2, 1), dim = c(2, 2, 2))
}
}
test_parameters_distribution <- benchmark_multivariate_GMM_estimation(
mixture_functions = relevant_mixture_functions[1],
initialisation_algorithms = c("kmeans"),
sigma_values = sigma_values[1],
mean_values = list("high OVL"=matrix(c(20, 22, 22, 20), nrow = 2, ncol = 2)),
proportions = list("balanced"=c(0.5, 0.5)),
Nbootstrap = 1, nobservations = c(500))
library(RGMMBench)
set.seed(20)
relevant_mixture_functions <- list(
"em R" = list(name_fonction = emnmix_multivariate, list_params = list()),
"Rmixmod" = list(name_fonction = RGMMBench::em_Rmixmod_multivariate, list_params = list()),
"mixtools" = list(name_fonction = em_mixtools_multivariate, list_params = list()),
"bgmm" = list(name_fonction = em_bgmm_multivariate, list_params = list()),
"mclust" = list(name_fonction = em_mclust_multivariate, list_params = list(prior = NULL)),
"EMCluster" = list(name_fonction = em_EMCluster_multivariate, list_params = list()),
"GMKMcharlie" = list(name_fonction = em_GMKMcharlie_multivariate, list_params = list()),
"flexmix" = list(name_fonction = em_flexmix_multivariate, list_params = list()),
"DCEM" = list(name_fonction = em_DCEM_multivariate, list_params = list()))
detach("package:RGMMBench", unload=TRUE)
